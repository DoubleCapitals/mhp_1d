/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mhp_1d_2 (
    input clk,
    input rst,
    input sum,
    input cout,
    output reg a,
    output reg b,
    output reg cin,
    output reg [7:0] indicator,
    input autotoggle,
    output reg [7:0] manualtestcheck,
    output reg [7:0] manualtestnum,
    output reg [7:0] manualerror,
    input manuala,
    input manualb,
    input manualcin
  );
  
  
  
  reg [26:0] M_clock_d, M_clock_q = 1'h0;
  localparam NONE_tester = 4'd0;
  localparam A_tester = 4'd1;
  localparam B_tester = 4'd2;
  localparam A_B_tester = 4'd3;
  localparam CIN_tester = 4'd4;
  localparam A_CIN_tester = 4'd5;
  localparam B_CIN_tester = 4'd6;
  localparam ALL_tester = 4'd7;
  localparam ERROR_tester = 4'd8;
  
  reg [3:0] M_tester_d, M_tester_q = NONE_tester;
  
  always @* begin
    M_tester_d = M_tester_q;
    M_clock_d = M_clock_q;
    
    M_clock_d = M_clock_q + 1'h1;
    a = 1'h0;
    b = 1'h0;
    cin = 1'h0;
    indicator = 8'h00;
    manualtestcheck = 8'h00;
    manualtestnum = 8'h00;
    manualerror = 8'h00;
    if (autotoggle == 1'h1) begin
      
      case (M_tester_q)
        NONE_tester: begin
          a = 1'h0;
          b = 1'h0;
          cin = 1'h0;
          indicator = 8'h00;
          if (M_clock_q[26+0-:1] == 1'h1) begin
            M_clock_d = 1'h0;
            if (sum == 1'h0 && cout == 1'h0) begin
              M_tester_d = A_tester;
            end else begin
              M_tester_d = ERROR_tester;
            end
          end
        end
        A_tester: begin
          a = 1'h1;
          b = 1'h0;
          cin = 1'h0;
          indicator = 8'h01;
          if (M_clock_q[26+0-:1] == 1'h1) begin
            M_clock_d = 1'h0;
            if (sum == 1'h1 && cout == 1'h0) begin
              M_tester_d = B_tester;
            end else begin
              M_tester_d = ERROR_tester;
            end
          end
        end
        B_tester: begin
          a = 1'h0;
          b = 1'h1;
          cin = 1'h0;
          indicator = 8'h02;
          if (M_clock_q[26+0-:1] == 1'h1) begin
            M_clock_d = 1'h0;
            if (sum == 1'h1 && cout == 1'h0) begin
              M_tester_d = A_B_tester;
            end else begin
              M_tester_d = ERROR_tester;
            end
          end
        end
        A_B_tester: begin
          a = 1'h1;
          b = 1'h1;
          cin = 1'h0;
          indicator = 8'h03;
          if (M_clock_q[26+0-:1] == 1'h1) begin
            M_clock_d = 1'h0;
            if (sum == 1'h0 && cout == 1'h1) begin
              M_tester_d = CIN_tester;
            end else begin
              M_tester_d = ERROR_tester;
            end
          end
        end
        CIN_tester: begin
          a = 1'h0;
          b = 1'h0;
          cin = 1'h1;
          indicator = 8'h04;
          if (M_clock_q[26+0-:1] == 1'h1) begin
            M_clock_d = 1'h0;
            if (sum == 1'h1 && cout == 1'h0) begin
              M_tester_d = A_CIN_tester;
            end else begin
              M_tester_d = ERROR_tester;
            end
          end
        end
        A_CIN_tester: begin
          a = 1'h1;
          b = 1'h0;
          cin = 1'h1;
          indicator = 8'h05;
          if (M_clock_q[26+0-:1] == 1'h1) begin
            M_clock_d = 1'h0;
            if (sum == 1'h0 && cout == 1'h1) begin
              M_tester_d = B_CIN_tester;
            end else begin
              M_tester_d = ERROR_tester;
            end
          end
        end
        B_CIN_tester: begin
          a = 1'h0;
          b = 1'h1;
          cin = 1'h1;
          indicator = 8'h06;
          if (M_clock_q[26+0-:1] == 1'h1) begin
            M_clock_d = 1'h0;
            if (sum == 1'h0 && cout == 1'h1) begin
              M_tester_d = ALL_tester;
            end else begin
              M_tester_d = ERROR_tester;
            end
          end
        end
        ALL_tester: begin
          a = 1'h1;
          b = 1'h1;
          cin = 1'h1;
          indicator = 8'h07;
          if (M_clock_q[26+0-:1] == 1'h1) begin
            M_clock_d = 1'h0;
            if (sum == 1'h1 && cout == 1'h1) begin
              M_tester_d = NONE_tester;
            end else begin
              M_tester_d = ERROR_tester;
            end
          end
        end
        ERROR_tester: begin
          a = 1'h0;
          b = 1'h0;
          cin = 1'h0;
          indicator = 8'hff;
          M_tester_d = ERROR_tester;
        end
      endcase
    end else begin
      a = manuala;
      b = manualb;
      cin = manualcin;
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_clock_q <= 1'h0;
      M_tester_q <= 1'h0;
    end else begin
      M_clock_q <= M_clock_d;
      M_tester_q <= M_tester_d;
    end
  end
  
endmodule
